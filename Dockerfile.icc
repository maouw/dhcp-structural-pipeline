# syntax=docker/dockerfile:1
## Build Docker image for execution of dhcp pipelines within a Docker
## container with all modules and applications available in the image

FROM mambaorg/micromamba:focal as base

USER root

# Global system-level config
ENV TZ=UTC \
    LANGUAGE=en_US:en \
    LC_ALL=C.UTF-8 \
    LANG=C.UTF-8 \
    APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1

# Force apt to leave downloaded binaries in /var/cache/apt (massively speeds up Docker builds)
RUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache

# Acquire::Queue-Mode: Queuing mode; Queue-Mode can be one of host or access which determines how APT parallelizes outgoing connections. host means that one connection per target host will be opened, access means that one connection per URI type will be opened.
RUN echo 'Acquire::Queue-Mode "host";' > /etc/apt/apt.conf.d/99queue

ENV DHCP_PREFIX="/opt/dhcp"
ENV DHCP_DIR="${DHCP_PREFIX}/src"
ENV DRAWEMDIR="${DHCP_PREFIX}/share/DrawEM"
ENV FSLDIR="${DHCP_PREFIX}/fsl"
ENV PATH="${DHCP_PREFIX}/bin:${FSLDIR}/bin:${PATH}"
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF

    mkdir -p "${DHCP_PREFIX}"/{bin,etc,lib,libexec,share} "${DHCP_DIR}" "${DRAWEMDIR}"
    chmod -R a+rX "${DHCP_PREFIX}" "${DHCP_DIR}"
    echo "${DHCP_PREFIX}/lib" > /etc/ld.so.conf.d/0-dhcp-pipeline.conf
    ldconfig

EOF

# Install tools:
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked --mount=type=cache,target=/var/lib/apt,sharing=locked --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
    <<-EOF

    export DEBIAN_FRONTEND=noninteractive
    apt-get update -qq
    apt-get install -yq --no-install-recommends \
        bc \
        ca-certificates \
        curl \
        git \
        git-lfs \
        gpg \
        gpg-agent \
        gzip \
        less \
        moreutils \
        parallel \
        nano \
        net-tools \
        openssh-client \
        tar \
        time \
        unzip \
        wget

    curl -fsSL https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB | gpg --dearmor > /usr/share/keyrings/intel-oneapi-archive-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/intel-oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main " > /etc/apt/sources.list.d/oneAPI.list

    test -f /usr/share/doc/kitware-archive-keyring/copyright || wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
    echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null

    apt-get update -qq
    apt-get install -yq --no-install-recommends \
        freeglut3-dev \
        libarpack2-dev \
        libboost-dev \
        libboost-math-dev \
        libboost-random-dev \
        libcilkrts5 \
        libcoarrays-openmpi-dev \
        libdcmtk-dev \
        libdouble-conversion-dev \
        libeigen3-dev  \
        libexpat-dev \
        libfftw3-dev \
        libflann-dev \
        libfreetype6-dev \
        libftgl-dev \
        libgdcm-dev \
        libgl-dev \
        libglew-dev \
        libglib2.0-dev \
        libglm-dev \
        libglvnd-dev \
        libglx-dev \
        libgtest-dev \
        libhdf5-dev \
        libjpeg-dev \
        libjsoncpp-dev \
        liblz4-dev \
        libminc-dev \
        libnetcdf-dev \
        libnifti-dev \
        libosmesa6-dev \
        libpng-dev \
        libpng-tools \
        libqt5opengl5-dev \
        libquazip5-dev \
        libqwt-qt5-dev \
        libssl-dev \
        libsuitesparse-dev \
        libxml2-dev \
        mesa-utils \
        qtbase5-dev \
        uuid-dev \
        zlib1g-dev
EOF

# Install tools:
ENV ENV_NAME="${FSLDIR}"
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked --mount=type=cache,target=/var/lib/apt,sharing=locked --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
    <<-EOF

    # Set up micromamba and install FSL:
    export CI=1
    micromamba create --yes --verbose --prefix "${ENV_NAME}" --channel https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/public --channel conda-forge fsl-avwutils
    micromamba clean --yes --all
    micromamba env list >&2
EOF

# Install build tools:
FROM base AS builder
ARG MAMBA_DOCKERFILE_ACTIVATE=1
WORKDIR "/opt/build"
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked --mount=type=cache,target=/var/lib/apt,sharing=locked --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
    <<-EOF

    export DEBIAN_FRONTEND=noninteractive
    apt-get install -yq \
        build-essential \
        cmake \
        intel-hpckit-2023.2.0 \
        libarchive13 \
        libtool \
        ninja-build

        cmake_dir="$(find /usr/share -maxdepth 1 -maxdepth 1 -follow -name 'cmake-*.*' | sort -V | head -n 1 || true)"

        [ -n "${cmake_dir:-}" ] || { echo "ERROR: cmake directory not found in /usr/share" >&2; exit 1; }
        ln -sv "${cmake_dir}" /opt/build/cmake-dir
EOF
COPY --chmod=644 src/config/compilervars.sh "/opt/build/compilervars.sh"

# Start build:
FROM builder AS build-vtk
ARG MAMBA_DOCKERFILE_ACTIVATE=1
WORKDIR /opt/build/vtk
ADD --link --keep-git-dir=true https://github.com/Kitware/VTK.git#v8.2.0 src
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF

    mkdir -p build && cd build
    source "/opt/build/compilervars.sh"
    set_compiler_flags "-wd1890" "-std=c++11 ${INTEL_MKL_OPENMP_STATIC_FLAGS}"
    cmake -Wno-dev -GNinja \
            -D CMAKE_CXX_STANDARD=11 \
            -D CMAKE_CXX_EXTENSIONS:BOOL=OFF \
            -D BUILD_DOCUMENTATION:BOOL=OFF \
            -D BUILD_SHARED_LIBS:BOOL=ON \
            -D BUILD_TESTING:BOOL=OFF \
            -D VTK_USE_SYSTEM_EIGEN:BOOL=ON \
            -D VTK_USE_SYSTEM_EXPAT:BOOL=ON \
            -D VTK_USE_SYSTEM_HDF5:BOOL=ON \
            -D VTK_USE_SYSTEM_JPEG:BOOL=ON \
            -D VTK_USE_SYSTEM_JSONCPP:BOOL=ON \
            -D VTK_USE_SYSTEM_LZ4:BOOL=ON \
            -D VTK_USE_SYSTEM_NETCDF:BOOL=ON \
            -D VTK_USE_SYSTEM_PNG:BOOL=ON \
            -D VTK_USE_SYSTEM_TIFF:BOOL=ON \
            -D VTK_RENDERING_BACKEND="None" \
            -D VTK_SMP_IMPLEMENTATION_TYPE=OPENMP \
            -D VTK_WRAP_PYTHON:BOOL=OFF \
            -D VTKm_ENABLE_CUDA:BOOL=OFF \
            -D VTKm_ENABLE_OPENMP:BOOL=ON \
            -D VTKm_ENABLE_RENDERING:BOOL=OFF \
            -D VTK_Group_Qt:BOOL=OFF \
            -D VTK_Group_Rendering:BOOL=OFF \
            -D VTK_Group_StandAlone:BOOL=OFF \
            -D VTK_Group_Web:BOOL=OFF \
            -D Module_vtkAcceleratorsVTKm:BOOL=ON \
            -D Module_vtkCommonCore:BOOL=ON \
            -D Module_vtkCommonDataModel:BOOL=ON \
            -D Module_vtkCommonExecutionModel:BOOL=ON \
            -D Module_vtkFiltersCore:BOOL=ON \
            -D Module_vtkFiltersFlowPaths:BOOL=ON \
            -D Module_vtkFiltersGeneral:BOOL=ON \
            -D Module_vtkFiltersGeometry:BOOL=ON \
            -D Module_vtkFiltersHybrid:BOOL=ON \
            -D Module_vtkFiltersModeling:BOOL=ON \
            -D Module_vtkFiltersParallel:BOOL=ON \
            -D Module_vtkFiltersSources:BOOL=ON \
            -D Module_vtkImagingCore:BOOL=ON \
            -D Module_vtkImagingStencil:BOOL=ON \
            -D Module_vtkIOGeometry:BOOL=ON \
            -D Module_vtkIOImage:BOOL=ON \
            -D Module_vtkIOLegacy:BOOL=ON \
            -D Module_vtkIOParallel:BOOL=ON \
            -D Module_vtkIOPLY:BOOL=ON \
            -D Module_vtkIOXML:BOOL=ON \
            -D Module_vtkParallelCore:BOOL=ON \
            ../src || { tail -v -n +0 CMakeFiles/*.log || true; exit 1; }
    cmake --build .
    cmake --install .
EOF

FROM build-vtk AS build-itk
ARG MAMBA_DOCKERFILE_ACTIVATE=1
WORKDIR /opt/build/itk
ADD --keep-git-dir=true https://github.com/InsightSoftwareConsortium/ITK.git#v5.4rc04 src
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF

    mkdir -p build && cd build
    source "/opt/build/compilervars.sh"
    set_compiler_flags "" "-std=c++17 ${INTEL_MKL_TBB_STATIC_FLAGS}"
    cmake -Wno-dev -GNinja \
            -D CMAKE_CXX_STANDARD=17 \
            -D CMAKE_CXX_EXTENSIONS:BOOL=OFF \
            -D BUILD_DOCUMENTATION:BOOL=OFF \
            -D BUILD_EXAMPLES:BOOL=OFF \
            -D BUILD_SHARED_LIBS:BOOL=ON \
            -D BUILD_TESTING:BOOL=OFF \
            -D EIGEN_USE_MKL:BOOL=ON \
            -D EIGEN_USE_MKL_ALL:BOOL=ON \
            -D CMAKE_CXX_VISIBILITY_PRESET="default" \
            -D ITK_BUILD_DEFAULT_MODULES:BOOL=OFF \
            -D ITK_C_WARNING_FLAGS="-Wno-uninitialized -Wno-unused-parameter -wd1268 -wd981 -wd383 -wd1418 -wd1419 -wd2259 -wd1572 -wd424 -Wno-long-double -Wcast-align -Wdisabled-optimization -Wextra -Wformat=2 -Winvalid-pch -Wno-format-nonliteral -Wpointer-arith -Wshadow -Wunused -Wwrite-strings -Wno-strict-overflow" \
            -D ITK_CXX_WARNING_FLAGS="-wd1268 -wd981 -wd383 -wd1418 -wd1419 -wd2259 -wd1572 -wd424  -Wno-long-double -Wcast-align -Wdisabled-optimization -Wextra -Wformat=2 -Winvalid-pch -Wno-format-nonliteral -Wpointer-arith -Wshadow -Wunused -Wwrite-strings -Wno-strict-overflow -Wno-deprecated -Wno-invalid-offsetof -Wno-undefined-var-template -Woverloaded-virtual -Wctad-maybe-unsupported -Wstrict-null-sentinel" \
            -D ITK_TEMPLATE_VISIBILITY_DEFAULT:BOOL=ON \
            -D ITK_USE_MKL:BOOL=ON \
            -D ITK_USE_SYSTEM_DCMTK:BOOL=ON \
            -D ITK_USE_SYSTEM_EIGEN:BOOL=ON \
            -D ITK_USE_SYSTEM_EXPAT:BOOL=ON \
            -D ITK_USE_SYSTEM_FFTW:BOOL=ON \
            -D ITK_USE_SYSTEM_HDF5:BOOL=ON \
            -D ITK_USE_SYSTEM_JPEG:BOOL=ON \
            -D ITK_USE_SYSTEM_MINC:BOOL=OFF \
            -D ITK_USE_SYSTEM_PNG:BOOL=ON \
            -D ITK_USE_SYSTEM_TIFF:BOOL=ON \
            -D ITK_USE_SYSTEM_ZLIB:BOOL=ON \
            -D ITK_USE_TBB:BOOL=ON \
            -D ITKGroup_Core:BOOL=OFF \
            -D Module_ITKBiasCorrection:BOOL=ON \
            -D Module_ITKCommon:BOOL=ON \
            -D Module_ITKImageGrid:BOOL=ON \
            -D Module_ITKImageIntensity:BOOL=ON \
            -D Module_ITKImageStatistics:BOOL=ON \
            -D Module_ITKIOCSV:BOOL=ON \
            -D Module_ITKIOHDF5:BOOL=ON \
            -D Module_ITKIOImageBase:BOOL=ON \
            -D Module_ITKIOJPEG:BOOL=ON \
            -D Module_ITKIOMesh:BOOL=ON \
            -D Module_ITKIOMeshBase:BOOL=ON \
            -D Module_ITKIOMeshGifti:BOOL=ON \
            -D Module_ITKIOMeshOBJ:BOOL=ON \
            -D Module_ITKIOMeshOFF:BOOL=ON \
            -D Module_ITKIOMeshVTK:BOOL=ON \
            -D Module_ITKIOMINC:BOOL=ON \
            -D Module_ITKIONIFTI:BOOL=ON \
            -D Module_ITKIOPNG:BOOL=ON \
            -D Module_ITKIORAW:BOOL=ON \
            -D Module_ITKIOTIFF:BOOL=ON \
            -D Module_ITKIOTransformBase:BOOL=ON \
            -D Module_ITKTransformFactory:BOOL=ON \
            -D Module_ITKIOTransformHDF5:BOOL=ON \
            -D Module_ITKIOTransformInsightLegacy:BOOL=ON \
            -D Module_ITKIOVTK:BOOL=ON \
            -D Module_ITKIOXML:BOOL=ON \
            -D Module_ITKTBB:BOOL=ON \
            -D Module_ITKTestKernel:BOOL=OFF \
            -D Module_ITKThresholding:BOOL=ON \
            -D Module_ITKTransform:BOOL=ON \
        ../src || { tail -v -n +0 CMakeFiles/*.log || true; exit 1; }
    cmake --build .
    cmake --install .
EOF

FROM build-itk AS build-mirtk
ARG MAMBA_DOCKERFILE_ACTIVATE=1
WORKDIR /opt/build/mirtk
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
ADD --link --keep-git-dir=true https://github.com/BioMedIA/MIRTK.git#d0722b291597f2c4b1fbb9f929711af59573de58 src
COPY --link src/ext/antsCommandLineOption.h antsCommandLineOption.h
RUN <<-EOF

    cd src
    git fetch origin --no-recurse-submodules
    git checkout be86b02d47a7ce74b17224891e25899c30f37d74 -- CMake/Modules/FindTBB.cmake Modules/Common/include/mirtk/Parallel.h Modules/Common/include/mirtk/Parallel.h Modules/Common/src/Parallel.cc
    cd Packages/DrawEM
    git fetch --tags origin
    git checkout v1.2.1
    mv /opt/build/mirtk/antsCommandLineOption.h ThirdParty/ANTs/
    # sed -Ei 's/(^.*\bMIRTK_Common_EXPORT\b.*\btbb_scheduler.*$)/\/\/ \1/g' Modules/Common/include/mirtk/Parallel.h
    # sed -Ei 's/(^.*tbb::task_scheduler_init.*$)/\/\/ \1/g' Modules/Common/include/mirtk/Parallel.h
    # sed -Ei 's/(^.*tbb[/]task_scheduler_init.h.*$)/\/\/ \1/g' Modules/Common/include/mirtk/Parallel.h
    
    cd /opt/build/mirtk

    mkdir -p build && cd build
    source "/opt/build/compilervars.sh"
    set_compiler_flags "" "-std=c++17 ${INTEL_MKL_TBB_STATIC_FLAGS}"
    cmake -Wno-dev -GNinja \
            -D CMAKE_CXX_STANDARD=17 \
            -D CMAKE_CXX_EXTENSIONS:BOOL=OFF \
            -D BUILD_CHANGELOG:BOOL=OFF \
            -D BUILD_DOCUMENTATION:BOOL=OFF \
            -D BUILD_EXAMPLES:BOOL=OFF \
            -D BUILD_CHANGELOG:BOOL=OFF \
            -D BUILD_SHARED_LIBS:BOOL=ON \
            -D BUILD_TESTING:BOOL=OFF \
            -D EIGEN_USE_MKL:BOOL=ON \
            -D EIGEN_USE_MKL_ALL:BOOL=ON \
            -D USE_SYSTEM_EIGEN:BOOL=ON \
            -D WITH_EIGEN3:BOOL=ON \
            -D WITH_FLANN:BOOL=ON \
            -D WITH_ITK:BOOL=ON \
            -D WITH_MATLAB:BOOL=OFF \
            -D WITH_TBB:BOOL=ON \
            -D WITH_VTK:BOOL=ON \
            -D DEPENDS_ITK_DIR="${DHCP_PREFIX}" \
            -D DEPENDS_VTK_DIR="${DHCP_PREFIX}" \
            -D ITK_DIR="${DHCP_PREFIX}" \
            -D VTK_DIR="${DHCP_PREFIX}" \
            -D MODULE_Deformable:BOOL=ON \
            -D MODULE_DrawEM:BOOL=ON \
        ../src || { tail -v -n +0 CMakeFiles/*.log || true; exit 1; }
    cmake --build .
    cmake --install .

    cd /opt/build/mirtk
    mkdir -p "${DRAWEMDIR}" && cp -Rv /opt/build/mirtk/src/Packages/DrawEM/atlases "${DRAWEMDIR}"

    cp -Rv src/Packages/DrawEM/label_names "${DRAWEMDIR}"
    cp -Rv src/Packages/DrawEM/parameters "${DRAWEMDIR}"
    cp -Rv src/Packages/DrawEM/scripts "${DRAWEMDIR}"
EOF


FROM build-mirtk AS build-workbench
ARG MAMBA_DOCKERFILE_ACTIVATE=1
WORKDIR /opt/build/workbench
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
ADD --link --keep-git-dir=true https://github.com/Washington-University/workbench.git#f0925edfd37db3808794a4df6355b18c80f49a04 src
COPY src/ext/NiftiHeader.cxx /opt/build/workbench/src/src/Nifti/NiftiHeader.cxx
COPY src/ext/FindQwt.cmake /opt/build/workbench/FindQwt.cmake
RUN <<-EOF

    sed --in-place -E 's/-openmp-link=static//g' src/src/CMakeLists.txt
    sed --in-place -E 's/DOT_USEFMA\s*0\s*[)]/DOT_USEFMA 1)/g' src/src/kloewe/dot/CMakeLists.txt
    sed --in-place -E 's/DOT_USEAVX512\s*0\s*[)]/DOT_USEAVX512 1)/g' src/src/kloewe/dot/CMakeLists.txt
    sed --in-place 's/if ((CMAKE_COMPILER_IS_GNUCC OR CLANG_FLAG) AND CMAKE_SIZEOF_VOID_P EQUAL 8)/if ((${CMAKE_CXX_COMPILER} MATCHES "^.*icpc$" OR CMAKE_COMPILER_IS_GNUCC OR CLANG_FLAG) AND CMAKE_SIZEOF_VOID_P EQUAL 8)/g' src/src/CMakeLists.txt
    sed --in-place -E '/^\s*ADD_SUBDIRECTORY\s*\(\s*(GuiQt|Qwt|Desktop|Qwt)\s*\)/d' src/src/CMakeLists.txt
    sed --in-place -E 's/PKG_CHECK_MODULES\(\s*Qwt\s+qwt\s*\)/FIND_PACKAGE(Qwt)/g' src/src/CMakeLists.txt
    sed --in-place -E '/^GuiQt\s*$/d' src/src/Tests/CMakeLists.txt
    sed --in-place -E '/^\$\{CMAKE_SOURCE_DIR\}\/GuiQt/d' src/src/Tests/CMakeLists.txt

    mkdir -p /opt/build/cmake-dir/Modules
    cp /usr/share/quazip/FindQuaZip5.cmake /opt/build/cmake-dir/Modules/FindQuaZip.cmake
    cp FindQwt.cmake /opt/build/cmake-dir/Modules/FindQwt.cmake

    (cd src/src/CZIlib/CZI && ln -sv eigen Eigen)

    mkdir -p build && cd build
    export INTEL_OPTIMIZER_IPO=''
    source "/opt/build/compilervars.sh"
    set_compiler_flags "-wd9 -I/opt/build/workbench/src/src/CZIlib/CZI" "-std=c++17 ${INTEL_MKL_OPENMP_DYNAMIC_FLAGS}"
    cmake -Wno-dev -GNinja \
            -D CMAKE_CXX_STANDARD=17 \
            -D CMAKE_CXX_EXTENSIONS=OFF \
            -D WORKBENCH_MESA_DIR=/usr \
            -D WORKBENCH_USE_QT5=TRUE \
            -D WORKBENCH_USE_SIMD=TRUE \
            -D WORKBENCH_USE_QT5_QOPENGL_WIDGET=TRUE \
            -D OpenGL_GL_PREFERENCE=GLVND \
        ../src/src
    cmake --build .
    ctest
    cmake --install .

EOF

FROM build-workbench AS build-sphericalmesh
ARG MAMBA_DOCKERFILE_ACTIVATE=1
WORKDIR /opt/build/sphericalmesh
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
ADD --link --keep-git-dir=true https://github.com/amakropoulos/SphericalMesh.git#c41824cda791b806f79b88f2b27604a2f3268d19 src
COPY src/ext/SphericalMeshConvertToString.h /opt/build/sphericalmesh/src/include/mirtk/SphericalMeshConvertToString.h
RUN <<-EOF
    
    # Fix some issues with compilation:
    sed --in-place -E  's/std::to_string/convert_to_string/g' src/include/mirtk/*.h src/src/*.cc
    sed --in-place -E 's/(^#define M.*H_*[[:space:]]*$)/\1\n#include "mirtk\/SphericalMeshConvertToString.h"\n/g' src/include/mirtk/{M2SParameters.h,M2SDiffuser.h,M2SRemesher.h,MeshToSphere.h}

    mkdir -p build && cd build
    source "/opt/build/compilervars.sh"
    set_compiler_flags "" "-std=c++17 ${INTEL_MKL_TBB_STATIC_FLAGS}"
    cmake -Wno-dev -GNinja \
            -D CMAKE_CXX_STANDARD=17 \
        ../src
    cmake --build .
    cmake --install .
    install -vpDm755 bin/* "${DHCP_PREFIX}/bin"
EOF


FROM build-sphericalmesh AS build-pipeline-applications
ARG MAMBA_DOCKERFILE_ACTIVATE=1
WORKDIR "/opt/build/pipeline-applications"
COPY src/applications /opt/build/pipeline-applications/src
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF

    mkdir -p build && cd build
    source "/opt/build/compilervars.sh"
    set_compiler_flags "" "-std=c++17 ${INTEL_MKL_TBB_STATIC_FLAGS}"

    cmake -Wno-dev -GNinja \
            -D CMAKE_CXX_STANDARD=17 \
        ../src
    cmake --build .
    cmake --install .
    install -v -Dm755 bin/* ${DHCP_PREFIX}/bin
EOF

FROM build-pipeline-applications AS build-pipeline
ARG MAMBA_DOCKERFILE_ACTIVATE=1
WORKDIR "${DHCP_DIR}"
COPY --chmod=a+rX src/dhcp-pipeline "${DHCP_DIR}"
COPY version ${DHCP_DIR}/version

# Install extra fsl stuff:
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF

    # Set up micromamba and install FSL:
    export CI=1
    micromamba install --yes --verbose --prefix "${ENV_NAME}" --channel https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/public --channel conda-forge fsl-flirt fsl-bet2
    micromamba clean --yes --all
EOF

SHELL ["/bin/bash", "-eEx", "-c"]
RUN <<-EOF

    ln -sv "${DRAWEMDIR}/atlases" ${DHCP_DIR}/atlases
    echo "${DHCP_PREFIX}/lib/mirtk" >> /etc/ld.so.conf.d/0-dhcp-pipeline.conf
    (source "/opt/build/compilervars.sh"; find "${DHCP_PREFIX}" -type f -executable 2>/dev/null | xargs ldd 2>/dev/null | grep "=>[[:space:]]*${ONEAPI_ROOT}" | grep -o -E '/\S*' | sort | uniq | xargs -I {} cp -v {} "${DHCP_PREFIX}/lib/")
    ldconfig
EOF

FROM base AS final
ARG MAMBA_DOCKERFILE_ACTIVATE=1
WORKDIR /
COPY --from=build-pipeline "${DHCP_PREFIX}" "${DHCP_PREFIX}"
RUN ldconfig

WORKDIR /data
ENTRYPOINT ["/opt/dhcp/src/dhcp-pipeline.sh"]
CMD ["-help"]
