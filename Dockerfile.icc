# syntax=docker/dockerfile:1
## Build Docker image for execution of dhcp pipelines within a Docker
## container with all modules and applications available in the image

#FROM intel/oneapi-basekit:2023.2.1-devel-ubuntu20.04 as builder
FROM ubuntu:20.04 as builder


# Global system-level config
ENV TZ=UTC \
    LANGUAGE=en_US:en \
    LC_ALL=C.UTF-8 \
    LANG=C.UTF-8 \
    DEBIAN_FRONTEND=noninteractive \
    APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1


# Force apt to leave downloaded binaries in /var/cache/apt (massively speeds up Docker builds)
RUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache

# Acquire::Queue-Mode: Queuing mode; Queue-Mode can be one of host or access which determines how APT parallelizes outgoing connections. host means that one connection per target host will be opened, access means that one connection per URI type will be opened.
RUN echo 'Acquire::Queue-Mode "host";' > /etc/apt/apt.conf.d/99queue

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
    apt-get update -yq && \
    apt-get install -yq \
        bc \
        build-essential \
        ca-certificates \
        cmake \
        curl \
        git \
        gpg-agent \
        less \
        libarchive13 \
        libtool \
        nano \
        net-tools \
        ninja-build \
        openssh-client \
        pkg-config \
        software-properties-common \
        unzip \
        wget

# Install essential build tools:
FROM builder as builder-intel-devtools

# Python version
ARG INTEL_ONEAPI_PYTHON_VERSION=2023.2.0-49420
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
<<-EOF
    { curl -fsSL https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB | gpg --dearmor > /usr/share/keyrings/intel-oneapi-archive-keyring.gpg || exit 1; }
    echo "deb [signed-by=/usr/share/keyrings/intel-oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main " > /etc/apt/sources.list.d/oneAPI.list
    apt-get update -yq
    apt-get install -yq "linux-headers-$(uname -r)" || true
    apt-get install -yq intel-hpckit-2023.2.0 intel-oneapi-python"${INTEL_ONEAPI_PYTHON_VERSION:+=${INTEL_ONEAPI_PYTHON_VERSION}}"
EOF

# Install headers and libraries:
FROM builder-intel-devtools as builder-prerequisites
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
    apt-get update -yq && \
    apt-get install -yq \
        freeglut3-dev \
        libarpack2-dev \
        libboost-dev \
        libboost-math-dev \
        libboost-random-dev \
        libeigen3-dev  \
        libfftw3-dev \
        libflann-dev \
        libfreetype6-dev \
        libftgl-dev \
        libgl-dev \
        libglib2.0-dev \
        libglvnd-dev \
        libglx-dev \
        libgtest-dev \
        libnifti-dev \
        libosmesa6-dev \
        libpng-dev \
        libqt5opengl5-dev \
        libqwt-qt5-dev \
        libssl-dev \
        libsuitesparse-dev \
        mesa-utils \
        qtbase5-dev \
        uuid-dev \
        zlib1g-dev

FROM builder-prerequisites as builder-build-environment
# Set up build target directory and add to cmake prefixes

ENV PIPELINE_NAME="${PIPELINE_NAME:-dhcp-pipeline}"
ENV PIPELINE_ROOT="${PIPELINE_ROOT:-/opt/${PIPELINE_NAME}}"
ENV PIPELINE_DIR="${PIPELINE_ROOT}/src/${PIPELINE_NAME}"
ENV PIPELINE_DATA_DIR="${PIPELINE_DIR}/share/${PIPELINE_NAME}"    
ENV ONEAPI_ROOT="${ONEAPI_ROOT:-/opt/intel/oneapi}"

# Ooptimizer flags
ARG INTEL_OPTIMIZER_FLAGS="-O3 -fp-model=precise -mavx -axCORE-AVX2,CORE-AVX512"
ENV INTEL_OPTIMIZER_FLAGS="${INTEL_OPTIMIZER_FLAGS:-}"
ARG NCPU
ENV NCPU="${NCPU:-}"

ARG COMPILERVARS_PATH=/usr/local/etc/compilervars.sh

COPY --chmod=755 parameters/compilervars.sh "${COMPILERVARS_PATH}"

WORKDIR "${PIPELINE_ROOT}"
RUN mkdir -p "${PIPELINE_ROOT}/bin" "${PIPELINE_ROOT}/share" "${PIPELINE_DIR}" && chmod -R a+rX "${PIPELINE_ROOT}" "${PIPELINE_DIR}"
RUN echo "${PIPELINE_ROOT}/lib" > /etc/ld.so.conf.d/dhcp-pipeline.conf


FROM builder-build-environment as builder-vtk
WORKDIR /opt/build/vtk
ADD --keep-git-dir=true https://github.com/Kitware/VTK.git#release src
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF
    (cd src && git submodule update --init)
    mkdir -p build && cd build
    export __INTEL_POST_CFLAGS="-static-intel -ltbb -lstdc++ -lpthread -lm -ldl -Wno-unused-command-line-argument"

    source "${COMPILERVARS_PATH}"

    # Build with icx/icpx to avoid:
    #   /opt/build/vtk/src/Common/Math/vtkFFT.txx(327): error: nontype "<unnamed>::ConstTupleReferenceType" is not a type name
    #       using ConstTupleRef = decltype(resRange)::ConstTupleReferenceType;

    cmake -GNinja -j "${NCPU}" \
            -D CMAKE_INSTALL_PREFIX="${PIPELINE_ROOT}" \
            -D CMAKE_PREFIX_PATH="${PIPELINE_ROOT}:${CMAKE_PREFIX_PATH:-}" \
            -D CMAKE_C_COMPILER=icx \
            -D CMAKE_CXX_COMPILER=icpx \
            -D CMAKE_BUILD_TYPE=Release \
            -D BUILD_SHARED_LIBS=ON \
            -D VTK_BUILD_DOCUMENTATION=OFF \
            -D VTK_OPENGL_HAS_OSMESA=ON \
            -D VTK_USE_X=OFF \
            -D OpenGL_GL_PREFERENCE=GLVND \
            -D VTK_SMP_ENABLE_TBB=ON \
            -D VTK_SMP_IMPLEMENTATION_TYPE=TBB \
            ../src
            cmake --build .
            cmake --install .
EOF

FROM builder-vtk as builder-itk
WORKDIR /opt/build/itk
ADD --link --keep-git-dir=true https://github.com/InsightSoftwareConsortium/ITK.git#v5.3.0 src
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF
    (cd src && git submodule update --init --recursive)
    mkdir -p build && cd build
    export __INTEL_POST_CFLAGS="-static-intel -std=c++14"

    source "${COMPILERVARS_PATH}" 
    
    cmake -GNinja -j "${NCPU}" \
        -D CMAKE_INSTALL_PREFIX="${BUILT_DIR}" \
        -D CMAKE_PREFIX_PATH="${BUILT_DIR}:${CMAKE_PREFIX_PATH:-}" \
        -D CMAKE_C_COMPILER=icc \
        -D CMAKE_BUILD_TYPE=Release \
        -D CMAKE_CXX_COMPILER=icpc \
        -D BUILD_EXAMPLES=OFF \
        -D BUILD_SHARED_LIBS=ON \
        -D BUILD_TESTING=OFF \
        -D BUILD_DOCUMENTATION=OFF \
        -D ITK_USE_MKL=ON \
        -D ITK_USE_TBB=ON \
        -D ITK_USE_SYSTEM_PNG=ON \
        -D ITK_USE_SYSTEM_ZLIB=ON \
        -D ITK_USE_SYSTEM_EIGEN=ON \
        -D CMAKE_CXX_STANDARD=14 \
        ../src || { cat -v CMakeFiles/*.log; exit 1; }
        cmake --build .
        cmake --install .
EOF

FROM builder-itk as builder-mirtk-prerequisites
WORKDIR /opt/build/mirtk
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
    apt-get update -yq && apt-get install -yq liblz4-dev libcilkrts5 && ldconfig

FROM builder-mirtk-prerequisites as builder-mirtk
WORKDIR /opt/build/mirtk
ADD --link --keep-git-dir=true https://github.com/BioMedIA/MIRTK.git src
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF
    cd src
    git log -1
    git submodule update --init --recursive

    # fix: TBB
    sed -Ei 's/(^.*\bMIRTK_Common_EXPORT\b.*\btbb_scheduler.*$)/\/\/ \1/g' Modules/Common/include/mirtk/Parallel.h
    sed -Ei 's/(^.*tbb::task_scheduler_init.*$)/\/\/ \1/g' Modules/Common/include/mirtk/Parallel.h
    sed -Ei 's/(^.*tbb[/]task_scheduler_init.h.*$)/\/\/ \1/g' Modules/Common/include/mirtk/Parallel.h

    echo "set(CMAKE_INSTALL_OPENMP_LIBRARIES FALSE)" >> CMakeLists.txt
    
    echo 'find_library(LZ4_LIBRARIES NAMES libvtklz4-9.3.so HINTS "lz4/lib")' >> CMakeLists.txt
    echo 'link_libraries(${LZ4_LIBRARIES})' >> CMakeLists.txt
    echo 'add_definitions(${LZ4_DEFINITIONS})' >> CMakeLists.txt

    cd ../
    mkdir -p build && cd build
    export __INTEL_POST_CFLAGS="-static-intel -std=c++14 -llz4"

    source "${COMPILERVARS_PATH}"    
    export CMAKE_INSTALL_OPENMP_LIBRARIES=FALSE
    
    cmake -GNinja -j "${NCPU}" \
            -D CMAKE_INSTALL_PREFIX="${PIPELINE_ROOT}" \
            -D CMAKE_INSTALL_OPENMP_LIBRARIES=FALSE \
            -D CMAKE_PREFIX_PATH="${PIPELINE_ROOT}:${CMAKE_PREFIX_PATH:-}" \
            -D CMAKE_C_COMPILER=icc \
            -D CMAKE_CXX_COMPILER=icpc \
            -D CMAKE_BUILD_TYPE=Release \
            -D BUILD_SHARED_LIBS=ON \
            -D BUILD_DOCUMENTATION=OFF  \
            -D BUILD_CHANGELOG=OFF \
            -D MODULE_Deformable=ON \
            -D MODULE_DrawEM=ON \
            -D WITH_VTK=ON \
            -D WITH_ITK=ON \
            -D WITH_TBB=ON \
            -D WITH_FLANN=ON \
            -D WITH_MATLAB=OFF \
            -D MIRTK_USE_SYSTEM_PNG=ON \
            -D VTK_DIR="${PIPELINE_ROOT}" \
            -D ITK_DIR="${PIPELINE_ROOT}" \
            -D DEPENDS_VTK_DIR="${PIPELINE_ROOT}" \
            -D DEPENDS_ITK_DIR="${PIPELINE_ROOT}" \
        ../src
        cmake --build .
        cmake --install .
        echo "${PIPELINE_ROOT}/lib/mirtk" > /etc/ld.so.conf.d/mirtk.conf
    cd ../
EOF


FROM builder-mirtk as builder-workbench
WORKDIR /opt/build/workbench
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
ADD --link --keep-git-dir=true https://github.com/Washington-University/workbench.git src
RUN <<-EOF
    echo "Fixing icpc command line error: \"option '-openmp-link=static' is not supported. Please use the replacement option '-qopenmp-link=static'\"" >&2 \
    sed --in-place -E 's/-openmp-link=static/-qopenmp-link=static/g' src/src/CMakeLists.txt
    
    # Modify Intel compiler name match to include icpx, the new Intel CPP compiler:
    sed --in-place -E '/^IF.*icpc/,/^ENDIF.*MATCHES.*icpc.*/ s/^.*ADD_DEF.*Wall.*/#/; s/\*icpc\$/*icp[cx]\$/g; s/-Wall/-Wno-inconsistent-missing-override -Wno-unused-command-line-argument/g' src/src/CMakeLists.txt

    mkdir -p build && cd build
    export __INTEL_POST_CFLAGS="-std=c++11 -Wno-c++11-narrowing -Wno-inconsistent-missing-override -static-intel -Wno-unused-command-line-argument"

    source "${COMPILERVARS_PATH}"    

    cmake -GNinja -j "${NCPU}" \
        -D CMAKE_C_COMPILER=icx \
        -D CMAKE_CXX_COMPILER=icpx \
        -D CMAKE_CXX_STANDARD=11 \
        -D CMAKE_CXX_STANDARD_REQUIRED=ON \
        -D CMAKE_CXX_EXTENSIONS=OFF \
        -D CMAKE_BUILD_TYPE=Release \
        -D WORKBENCH_MESA_DIR=/usr \
        -D WORKBENCH_USE_QT5=TRUE \
        -D OpenGL_GL_PREFERENCE=GLVND \
        -D WORKBENCH_USE_QT5_QOPENGL_WIDGET=TRUE \
        -D WORKBENCH_USE_SIMD=TRUE  \
        ../src/src
    cmake --build .
    cmake --install .
EOF

FROM builder-workbench as builder-fsl
ARG FSL_CONDA_ENV=fsl
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF
    export __INTEL_POST_CFLAGS="${__INTEL_POST_CFLAGS:-} -std=c++11"
    source "${COMPILERVARS_PATH}"    
    conda config --append channels https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/public
    conda config --append channels conda-forge
    conda install -y --verbose -n "${FSL_CONDA_ENV}" fsl-avwutils
    conda clean --all -y
    FSLBINS="$(command -v fslmaths || true)"
    test -n "${FSLBINDS:-}"
    FSLDIR="${FSLBINS%/*/*}"
	mkdir -p /etc/fsl
	echo "export FSLDIR=\"${FSLDIR}\"; . \${FSLDIR}/etc/fslconf/fsl.sh" > "${PIPELINE_ROOT}/etc/fsl.sh"
EOF

FROM builder-fsl as builder-pipeline
WORKDIR "/opt/build/pipeline"
COPY --chmod=a+rX dhcp-pipeline.sh version "${PIPELINE_DIR}"/
COPY --chmod=a+rX parameters "${PIPELINE_DIR}"/parameters
COPY --chmod=a+rX scripts "${PIPELINE_DIR}"/scripts
COPY --chmod=a+rX version CMakeLists.txt CHANGES.txt ./src
COPY --chmod=a+rX applications ./src/applications
COPY --chmod=a+rX ThirdParty ./src/ThirdParty
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF
    export __INTEL_POST_CFLAGS="${__INTEL_POST_CFLAGS:-} -std=c++11"
    source "${COMPILERVARS_PATH}"    
    cmake -GNinja -j "${NCPU}" \
            -D CMAKE_INSTALL_PREFIX="${PIPELINE_ROOT}" \
            -D CMAKE_PREFIX_PATH="${PIPELINE_ROOT}:${CMAKE_PREFIX_PATH:-}" \
            -D CMAKE_C_COMPILER=icc \
            -D CMAKE_CXX_COMPILER=icpc \
            -D CMAKE_BUILD_TYPE=Release \
            -D BUILD_SHARED_LIBS=ON \
            -D MODULE_Deformable=ON \
            -D MODULE_DrawEM=ON \
            -D WITH_VTK=ON \
            -D WITH_TBB=ON \
            -D WITH_ITK=ON \
            -D VTK_DIR="${PIPELINE_ROOT}" \
            -D ITK_DIR="${PIPELINE_ROOT}" \
            -D MIRTK_DIR="${PIPELINE_ROOT}" \
        ../src
    cmake --build .
    cmake --install .
    install -v -Dm755 bin/*  /opt/built/bin/
    install -v -Dm766
    cd ../
EOF
#    echo "export DRAWEMDIR=$DRAWEMDIR" >> $code_dir/parameters/path.sh
#    echo "export DRAWEMDIR=$DRAWEMDIR" >> $code_dir/parameters/path.sh
#    echo "export PATH=$pathext:"'${PATH}' >> $code_dir/parameters/path.sh

# FROM builder-itk as builder-atlases
# WORKDIR "${PIPELINE_DIR}"
# ARG ATLASES_URL="https://biomedic.doc.ic.ac.uk/brain-development/downloads/dHCP/atlases-dhcp-structural-pipeline-v1.zip"
# SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
# RUN <<-EOF
#     mkdir -p atlases && cd atlases
#     aria2c -x 4 -s 2 --out=atlases.zip "${ATLASES_URL}"
#     unzip atlases-dhcp-structural-pipeline-v1.zip -d .
#     rm atlases-dhcp-structural-pipeline-v1.zip
# EOF
#cd Packages/DrawEM/atlases/src
#unzip atlases-dhcp-structural-pipeline-v1.zip -d /opt/build/mirtk/build/Packages/DrawEM/atlases/src/atlases
#rm atlases-dhcp-structural-pipeline-v1.zip
#cd /opt/build/mirtk/build
#make install