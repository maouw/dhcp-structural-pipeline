# syntax=docker/dockerfile:1
## Build Docker image for execution of dhcp pipelines within a Docker
## container with all modules and applications available in the image

FROM ubuntu:20.04 as base

# Global system-level config
ENV TZ=UTC \
    LANGUAGE=en_US:en \
    LC_ALL=C.UTF-8 \
    LANG=C.UTF-8 \
    APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1

# Force apt to leave downloaded binaries in /var/cache/apt (massively speeds up Docker builds)
RUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache

# Acquire::Queue-Mode: Queuing mode; Queue-Mode can be one of host or access which determines how APT parallelizes outgoing connections. host means that one connection per target host will be opened, access means that one connection per URI type will be opened.
RUN echo 'Acquire::Queue-Mode "host";' > /etc/apt/apt.conf.d/99queue

# Install tools:
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
<<-EOF
    export DEBIAN_FRONTEND=noninteractive
    apt-get update -qq && \
    apt-get install -yq --no-install-recommends \
        bc \
        ca-certificates \
        curl \
        git \
        git-lfs \
        gpg \
        gpg-agent \
        gzip \
        less \
        lz4 \
        moreutils \
        nano \
        net-tools \
        openssh-client \
        pkg-config \
        shared-mime-info \
        tar \
        time \
        unzip \
        wget
    
    apt-get -yq install parallel

    { curl -fsSL https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB | gpg --dearmor > /usr/share/keyrings/intel-oneapi-archive-keyring.gpg || exit 1; }
    echo "deb [signed-by=/usr/share/keyrings/intel-oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main " > /etc/apt/sources.list.d/oneAPI.list

    test -f /usr/share/doc/kitware-archive-keyring/copyright || wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
    echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null

    apt-get update -qq
EOF

FROM base as builder-tools
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
<<-EOF
    export DEBIAN_FRONTEND=noninteractive
    apt-get install -yq \
        build-essential \
        cmake \
        libarchive13 \
        libtool \
        ninja-build
EOF

FROM builder-tools as builder-intel
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
<<-EOF
    export DEBIAN_FRONTEND=noninteractive
    apt-get install -yq intel-hpckit-2023.2.0
    apt-get install -yq intel-oneapi-python=2023.2.0-49420
EOF

# Install headers and libraries:
FROM builder-intel as builder-headers
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
<<-EOF
    export DEBIAN_FRONTEND=noninteractive
    apt-get install -yq --no-install-recommends \
        freeglut3-dev \
        libarpack2-dev \
        libboost-dev \
        libboost-math-dev \
        libboost-random-dev \
        libcilkrts5 \
        libcoarrays-openmpi-dev \
        libdcmtk-dev \
        libdouble-conversion-dev \
        libeigen3-dev  \
        libexpat-dev \
        libfftw3-dev \
        libflann-dev \
        libfreetype6-dev \
        libftgl-dev \
        libgdcm-dev \
        libgl-dev \
        libglew-dev \
        libglib2.0-dev \
        libglvnd-dev \
        libglx-dev \
        libgtest-dev \
        libhdf5-dev \
        libjpeg-dev \
        libjsoncpp-dev \
        liblz4-dev \
        libminc-dev \
        libnetcdf-dev \
        libnifti-dev \
        libosmesa6-dev \
        libpng-dev \
        libpng-tools \
        libqt5opengl5-dev \
        libqwt-qt5-dev \
        libssl-dev \
        libsuitesparse-dev \
        libxml2-dev \
        mesa-utils \
        qtbase5-dev \
        uuid-dev \
        zlib1g-dev
EOF

FROM builder-headers as builder-environment
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN \
<<-EOF
    mkdir -p /opt/dhcp/{bin,etc,lib,libexec,src,share}
    chmod -R a+rX /opt/dhcp
    echo /opt/dhcp/lib > /etc/ld.so.conf.d/dhcp-pipeline.conf
    ldconfig
EOF

COPY --chmod=644 parameters/compilervars.sh /opt/dhcp/etc/compilervars.sh

FROM builder-environment as builder-vtk
WORKDIR /opt/build/vtk
ADD --link --keep-git-dir=true https://github.com/Kitware/VTK.git#v8.2.0 src
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF
    (cd src; git submodule update --init --recursive;)

    mkdir -p build && cd build

    export MKLROOT="$(source /opt/intel/oneapi/setvars.sh >/dev/null 2>&1; echo "${MKLROOT:-}")"
    export __INTEL_POST_CFLAGS="-std=c++11 -L${MKLROOT}/lib/intel64 -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5 -lpthread -lm -ldl"

    export __INTEL_POST_CFLAGS="-std=c++11"
    source "/opt/dhcp/etc/compilervars.sh" 

    cmake -Wno-dev -GNinja \
            -D BUILD_SHARED_LIBS=ON \
            -D BUILD_TESTING=ON \
            -D BUILD_DOCUMENTATION=OFF \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_C_COMPILER=icc \
            -D CMAKE_CXX_COMPILER=icpc \
            -D CMAKE_CXX_EXTENSIONS=OFF \
            -D CMAKE_CXX_STANDARD_REQUIRED=ON \
            -D CMAKE_CXX_STANDARD=11 \
            -D CMAKE_INSTALL_PREFIX="/opt/dhcp" \
            -D CMAKE_PREFIX_PATH="/opt/dhcp:${CMAKE_PREFIX_PATH:-}" \
            -D EIGEN_USE_MKL=ON \
            -D EIGEN_USE_MKL_VML=ON \
            -D Module_vtkCommonCore=ON \
            -D Module_vtkCommonDataModel=ON \
            -D Module_vtkCommonExecutionModel=ON \
            -D Module_vtkFiltersCore=ON \
            -D Module_vtkFiltersFlowPaths=ON \
            -D Module_vtkFiltersGeneral=ON \
            -D Module_vtkFiltersGeometry=ON \
            -D Module_vtkFiltersHybrid=ON \
            -D Module_vtkFiltersModeling=ON \
            -D Module_vtkFiltersParallel=ON \
            -D Module_vtkFiltersSources=ON \
            -D Module_vtkImagingCore=ON \
            -D Module_vtkImagingStencil=ON \
            -D Module_vtkIOGeometry=ON \
            -D Module_vtkIOImage=ON \
            -D Module_vtkIOLegacy=ON \
            -D Module_vtkIOParallel=ON \
            -D Module_vtkIOPLY=ON \
            -D Module_vtkIOXML=ON \
            -D Module_vtkParallelCore=ON \
            -D VTK_BUILD_DOCUMENTATION=OFF \
            -D VTK_BUILD_TESTING=ON \
            -D VTK_Group_Qt=OFF \
            -D VTK_Group_Rendering=OFF \
            -D VTK_Group_StandAlone=OFF \
            -D VTK_Group_Web=OFF \
            -D VTK_SMP_IMPLEMENTATION_TYPE=OPENMP \
            -D VTK_USE_QT=OFF \
            -D VTK_USE_SYSTEM_GLEW=ON \
            -D VTK_USE_SYSTEM_LZ4=ON \
            -D VTK_USE_SYSTEM_EXPAT=ON \
            -D VTK_USE_SYSTEM_EIGEN=ON \
            -D VTK_USE_SYSTEM_JPEG=ON \
            -D VTK_USE_SYSTEM_PNG=ON \
            -D VTK_USE_SYSTEM_TIFF=ON \
            -D VTK_USE_SYSTEM_HDF5=ON \
            -D VTK_USE_SYSTEM_NETCDF=ON \
            -D VTK_USE_SYSTEM_JSONCPP=ON \
            -D VTK_WRAP_PYTHON=OFF \
            ../src || { tail -v -n +0 CMakeFiles/*.log || true; exit 1; }
    cmake --build .
    cmake --install .
EOF

FROM builder-vtk as builder-itk
WORKDIR /opt/build/itk
ADD --keep-git-dir=true https://github.com/InsightSoftwareConsortium/ITK.git#release src
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF
    (cd src && git submodule update --init --recursive)

    export MKLROOT="$(source /opt/intel/oneapi/setvars.sh >/dev/null 2>&1; echo "${MKLROOT:-}")"

    mkdir -p build && cd build

    export __INTEL_POST_CFLAGS="-std=c++17 -L${MKLROOT}/lib/intel64 -lmkl_intel_lp64 -lmkl_tbb_thread -lmkl_core -lpthread -lm -ldl -diag-disable=11074 -diag-disable=11076 -diag-disable=186 -diag-disable=1286"

    source "/opt/dhcp/etc/compilervars.sh" 

    cmake -Wno-dev -GNinja \
            -D BUILD_DOCUMENTATION=OFF \
            -D BUILD_EXAMPLES=OFF \
            -D BUILD_SHARED_LIBS=ON \
            -D CMAKE_BUILD_TYPE=MinSizeRel \
            -D CMAKE_C_COMPILER=icc \
            -D CMAKE_CXX_COMPILER=icpc \
            -D CMAKE_CXX_STANDARD_REQUIRED=ON \
            -D CMAKE_CXX_STANDARD=17 \
            -D CMAKE_INSTALL_PREFIX="/opt/dhcp" \
            -D CMAKE_PREFIX_PATH="/opt/dhcp:${CMAKE_PREFIX_PATH:-}" \
            -D ITK_Group_Bridge=ON \
            -D ITK_Group_Compatibility=ON \
            -D ITK_Group_Core=ON \
            -D ITK_Group_Filtering=ON \
            -D ITK_Group_IO=ON \
            -D ITK_Group_Nonunit=OFF \
            -D ITK_Group_Numerics=OFF \
            -D ITK_Group_Remote=OFF \
            -D ITK_Group_Video=OFF \
            -D ITK_USE_MKL=ON \
            -D ITK_USE_SYSTEM_LIBRARIES=ON \
            -D ITK_USE_SYSTEM_TBB=OFF \
            -D ITK_USE_TBB=ON \
            -D Module_GDCM=OFF \
        ../src || { tail -v -n +0 CMakeFiles/*.log || true; exit 1; }
    cmake --build .
    cmake --install .
EOF

FROM builder-itk as builder-mirtk
WORKDIR /opt/build/mirtk
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF
    (
        git clone https://github.com/BioMedIA/MIRTK.git src
        cd src
        git reset --hard d0722b291597f2c4b1fbb9f929711af59573de58
        git log -1
        git submodule update --init --recursive
        git checkout be86b02d47a7ce74b17224891e25899c30f37d74 -- CMake/Modules/FindTBB.cmake Modules/Common/include/mirtk/Parallel.h Modules/Common/include/mirtk/Parallel.h Modules/Common/src/Parallel.cc
        # sed -Ei 's/(^.*\bMIRTK_Common_EXPORT\b.*\btbb_scheduler.*$)/\/\/ \1/g' Modules/Common/include/mirtk/Parallel.h
        # sed -Ei 's/(^.*tbb::task_scheduler_init.*$)/\/\/ \1/g' Modules/Common/include/mirtk/Parallel.h
        # sed -Ei 's/(^.*tbb[/]task_scheduler_init.h.*$)/\/\/ \1/g' Modules/Common/include/mirtk/Parallel.h
        #( cd Packages/DrawEM; git fetch --tags origin; git checkout v1.2.1; )
    )

    mkdir -p build && cd build
    export DEBIAN_FRONTEND=noninteractive

    export MKLROOT="$(source /opt/intel/oneapi/setvars.sh >/dev/null 2>&1; echo "${MKLROOT:-}")"
    export __INTEL_POST_CFLAGS="-std=c++11"



    echo "set(CMAKE_INSTALL_OPENMP_LIBRARIES FALSE)" >> CMakeLists.txt


    export __INTEL_POST_CFLAGS="-std=c++17 -L${MKLROOT}/lib/intel64 -lmkl_intel_lp64 -lmkl_tbb_thread -lmkl_core -lpthread -lm -ldl -diag-disable=11074 -diag-disable=11076 -diag-disable=186 -diag-disable=1286"

    source "/opt/dhcp/etc/compilervars.sh"
    export CMAKE_INSTALL_OPENMP_LIBRARIES=FALSE
    
    cmake -Wno-dev -GNinja \
            -D BUILD_CHANGELOG=OFF \
            -D BUILD_DOCUMENTATION=OFF \
            -D BUILD_EXAMPLES=OFF \
            -D BUILD_SHARED_LIBS=ON \
            -D BUILD_SHARED_LIBS=ON \
            -D BUILD_TESTING=OFF \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_C_COMPILER=icc \
            -D CMAKE_CXX_COMPILER=icpc \
            -D CMAKE_CXX_STANDARD_REQUIRED=ON \
            -D CMAKE_CXX_STANDARD=17 \
            -D CMAKE_INSTALL_PREFIX="/opt/dhcp" \
            -D CMAKE_PREFIX_PATH="/opt/dhcp:${CMAKE_PREFIX_PATH:-}" \
            -D DEPENDS_ITK_DIR="/opt/dhcp" \
            -D DEPENDS_VTK_DIR="/opt/dhcp" \
            -D DEPENDS_TBB_DIR="${TBBROOT}" \
            -D ITK_DIR="/opt/dhcp" \
            -D MODULE_Deformable=ON \
            -D MODULE_DrawEM=ON \
            -D VTK_DIR="/opt/dhcp" \
            -D ITK_DIR="/opt/dhcp" \
            -D WITH_FLANN=ON \
            -D WITH_ITK=ON \
            -D WITH_MATLAB=OFF \
            -D WITH_TBB=ON \
            -D WITH_VTK=ON \
            -D WITH_EIGEN3=ON \
        ../src || { tail -v -n +0 CMakeFiles/*.log || true; exit 1; }
    cmake --build . --parallel ${CMAKE_BUILD_PARALLEL_LEVEL} -- -k 1
    cmake --install .
    echo "/opt/dhcp/lib/mirtk" > /etc/ld.so.conf.d/mirtk.conf; ldconfig
EOF


FROM builder-mirtk as builder-workbench
WORKDIR /opt/build/workbench
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
ADD --link --keep-git-dir=true https://github.com/Washington-University/workbench.git src
COPY NiftiHeader.cxx /opt/build/workbench/src/src/Nifti/NiftiHeader.cxx
COPY FindQwt.cmake /opt/build/workbench/FindQwt.cmake

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
    <<-EOF
    
    sed --in-place -E 's/-openmp-link=static/-qmkl=parallel/g' src/src/CMakeLists.txt
    sed --in-place -E 's/DOT_USEFMA\s*0\s*[)]/DOT_USEFMA 1)/g' src/src/kloewe/dot/CMakeLists.txt
    sed --in-place -E 's/DOT_USEAVX512\s*0\s*[)]/DOT_USEAVX512 1)/g' src/src/kloewe/dot/CMakeLists.txt
    sed --in-place 's/if ((CMAKE_COMPILER_IS_GNUCC OR CLANG_FLAG) AND CMAKE_SIZEOF_VOID_P EQUAL 8)/if ((${CMAKE_CXX_COMPILER} MATCHES "^.*icpc$" OR CMAKE_COMPILER_IS_GNUCC OR CLANG_FLAG) AND CMAKE_SIZEOF_VOID_P EQUAL 8)/g' src/src/CMakeLists.txt
    sed --in-place -E '/^\s*ADD_SUBDIRECTORY\s*\(\s*(GuiQt|Qwt|Desktop|Qwt)\s*\)/d' src/src/CMakeLists.txt
    sed --in-place -E 's/PKG_CHECK_MODULES\(\s*Qwt\s+qwt\s*\)/FIND_PACKAGE(Qwt)/g' src/src/CMakeLists.txt

    sed --in-place -E '/^GuiQt\s*$/d' src/src/Tests/CMakeLists.txt

    sed --in-place -E '/^\$\{CMAKE_SOURCE_DIR\}\/GuiQt/d' src/src/Tests/CMakeLists.txt

    dpkg -s libquazip5-dev >/dev/null 2>&1 || { apt-get update -q; apt-get install -yq libquazip5-dev; }
    dpkg -s libglm-dev >/dev/null 2>&1 || { apt-get update -q; apt-get install -yq libglm-dev; }
    cmake_dir="$(echo /usr/share/cmake* | head -n 1)"
    [ -d "${cmake_dir:-}" ] || exit 1
    cp /usr/share/quazip/FindQuaZip5.cmake "${cmake_dir}/Modules/FindQuaZip.cmake"
    cp FindQwt.cmake "${cmake_dir}/FindQwt.cmake"

    export MKLROOT="$(source /opt/intel/oneapi/setvars.sh >/dev/null 2>&1; echo "${MKLROOT:-}")"
    mkdir -p build && cd build
    export __INTEL_POST_CFLAGS="-std=c++17 -qmkl=parallel -lQt5Gui -wd9"

    source "/opt/dhcp/etc/compilervars.sh"    

    cmake -Wno-dev -GNinja \
        -D CMAKE_C_COMPILER=icc \
        -D CMAKE_CXX_COMPILER=icpc \
        -D CMAKE_CXX_STANDARD=17 \
        -D CMAKE_CXX_STANDARD_REQUIRED=ON \
        -D CMAKE_BUILD_TYPE=Release \
        -D CMAKE_INSTALL_PREFIX="/opt/dhcp" \
        -D CMAKE_PREFIX_PATH="/opt/dhcp:${CMAKE_PREFIX_PATH:-}" \
        -D WORKBENCH_MESA_DIR=/usr \
        -D WORKBENCH_USE_QT5=TRUE \
        -D WORKBENCH_USE_SIMD=TRUE \
        -D WORKBENCH_USE_QT5_QOPENGL_WIDGET=TRUE \
        -D OpenGL_GL_PREFERENCE=GLVND \
        ../src/src
    cmake --build . --parallel ${CMAKE_BUILD_PARALLEL_LEVEL} -- -k 1
    ctest
    cmake --install .

EOF

FROM builder-workbench as builder-sphericalmesh
WORKDIR /opt/build/sphericalmesh
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
ADD --link --keep-git-dir=true https://github.com/amakropoulos/SphericalMesh.git#c41824cda791b806f79b88f2b27604a2f3268d19 src
COPY SphericalMeshConvertToString.h /opt/build/sphericalmesh/src/include/mirtk/SphericalMeshConvertToString.h
RUN <<-EOF
    # Fix some issues with compilation:
    sed --in-place -E  's/std::to_string/convert_to_string/g' src/include/mirtk/*.h src/src/*.cc
    sed --in-place -E 's/(^#define M.*H_*[[:space:]]*$)/\1\n#include "mirtk\/SphericalMeshConvertToString.h"\n/g' src/include/mirtk/{M2SParameters.h,M2SDiffuser.h,M2SRemesher.h,MeshToSphere.h}

    mkdir -p build && cd build

    export MKLROOT="$(source /opt/intel/oneapi/setvars.sh >/dev/null 2>&1; echo "${MKLROOT:-}")"
    export __INTEL_POST_CFLAGS="-std=gnu++11 -L${MKLROOT}/lib/intel64 -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5 -lpthread -lm -ldl"
    source "/opt/dhcp/etc/compilervars.sh"

    export MIRTK_DIR="/opt/dhcp/lib/cmake/mirtk"
    export VTK_DIR="/opt/dhcp/lib/cmake/vtk-8.2"

    cmake -Wno-dev -GNinja \
        -D CMAKE_C_COMPILER=icc \
        -D CMAKE_CXX_COMPILER=icpc \
        -D CMAKE_CXX_STANDARD=11 \
        -D CMAKE_CXX_STANDARD_REQUIRED=ON \
        -D CMAKE_CXX_EXTENSIONS=OFF \
        -D CMAKE_BUILD_TYPE=Release \
        -D CMAKE_INSTALL_PREFIX="/opt/dhcp" \
        -D CMAKE_PREFIX_PATH="/opt/dhcp:${CMAKE_PREFIX_PATH:-}" \
        -D CMAKE_BUILD_TYPE=Release \
        ../src
    cmake --build .
    cmake --install .
    cp bin/mesh-to-sphere /opt/dhcp/bin/mesh-to-sphere
EOF

#ADD --link --keep-git-dir=true https://github.com/amakropoulos/SphericalMesh.git#dhcp-v1.2 src
#    git reset --hard c41824cda791b806f79b88f2b27604a2f3268d19

FROM builder-sphericalmesh as builder-fsl
ARG FSL_CONDA_ENV=fsl
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF
    export MKLROOT="$(source /opt/intel/oneapi/setvars.sh >/dev/null 2>&1; echo "${MKLROOT:-}")"
    export __INTEL_POST_CFLAGS="-std=gnu++11 -L${MKLROOT}/lib/intel64 -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5 -lpthread -lm -ldl"
    source "/opt/dhcp/etc/compilervars.sh"

    conda config --prepend channels conda-forge
    conda config --prepend channels https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/public
    conda create -y --verbose -n "${FSL_CONDA_ENV}"  fsl-avwutils
    conda clean --all -y
    FSLBINS="$(conda run -n "${FSL_CONDA_ENV}" command -v fslmaths || true)"
    test -n "${FSLBINS:-}"
    FSLDIR="${FSLBINS%/*/*}"
    mkdir -p /etc/fsl
    echo "export FSLDIR=\"${FSLDIR}\"; . \${FSLDIR}/etc/fslconf/fsl.sh" > "/opt/dhcp/etc/fsl.sh"
EOF


FROM builder-fsl as builder-pipeline
WORKDIR "/opt/build/pipeline"
COPY --chmod=a+rX dhcp-pipeline.sh version /opt/dhcp/src/
COPY --chmod=a+rX parameters /opt/dhcp/src/parameters
COPY --chmod=a+rX scripts /opt/dhcp/src/scripts
COPY --chmod=a+rX version CHANGES.txt CMakeLists.txt /opt/build/pipeline/src/
COPY --chmod=a+rX applications /opt/build/pipeline/src/applications
COPY --chmod=a+rX ThirdParty /opt/build/pipeline/src/ThirdParty
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF

    mkdir -p build && cd build

    export MKLROOT="$(source /opt/intel/oneapi/setvars.sh >/dev/null 2>&1; echo "${MKLROOT:-}")"
    export __INTEL_POST_CFLAGS="-std=c++17 -no-cilk"
    source "/opt/dhcp/etc/compilervars.sh"
    
    cmake -Wno-dev -GNinja \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_C_COMPILER=icc \
            -D CMAKE_CXX_COMPILER=icpc \
            -D CMAKE_CXX_STANDARD_REQUIRED=ON \
            -D CMAKE_CXX_STANDARD=17 \
            -D CMAKE_INSTALL_PREFIX="/opt/dhcp" \
            -D CMAKE_PREFIX_PATH="/opt/dhcp:${CMAKE_PREFIX_PATH:-}" \
        ../src
    cmake --build .
    cmake --install .
    install -v -Dm755 bin/*  /opt/dhcp/bin
EOF
#    echo "export DRAWEMDIR=$DRAWEMDIR" >> $code_dir/parameters/path.sh
#    echo "export DRAWEMDIR=$DRAWEMDIR" >> $code_dir/parameters/path.sh
#    echo "export PATH=$pathext:"'${PATH}' >> $code_dir/parameters/path.sh

# FROM builder-itk as builder-atlases
# WORKDIR "/opt/dhcp/src"
# ARG ATLASES_URL="https://biomedic.doc.ic.ac.uk/brain-development/downloads/dHCP/atlases-dhcp-structural-pipeline-v1.zip"
# SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
# RUN <<-EOF
#     mkdir -p atlases && cd atlases
#     aria2c -x 4 -s 2 --out=atlases.zip "${ATLASES_URL}"
#     unzip atlases-dhcp-structural-pipeline-v1.zip -d .
#     rm atlases-dhcp-structural-pipeline-v1.zip
# EOF
#cd Packages/DrawEM/atlases/src
#unzip atlases-dhcp-structural-pipeline-v1.zip -d /opt/build/mirtk/build/Packages/DrawEM/atlases/src/atlases
#rm atlases-dhcp-structural-pipeline-v1.zip
#cd /opt/build/mirtk/build
#make install