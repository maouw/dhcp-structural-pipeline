# syntax=docker/dockerfile:1
## Build Docker image for execution of dhcp pipelines within a Docker
## container with all modules and applications available in the image

#FROM intel/oneapi-basekit:2023.2.1-devel-ubuntu20.04 as builder
FROM ubuntu:20.04 as builder

# Global system-level config
ENV TZ=UTC \
    LANGUAGE=en_US:en \
    LC_ALL=C.UTF-8 \
    LANG=C.UTF-8 \
    DEBIAN_FRONTEND=noninteractive \
    APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1

# Force apt to leave downloaded binaries in /var/cache/apt (massively speeds up Docker builds)
RUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache

# Acquire::Queue-Mode: Queuing mode; Queue-Mode can be one of host or access which determines how APT parallelizes outgoing connections. host means that one connection per target host will be opened, access means that one connection per URI type will be opened.
RUN echo 'Acquire::Queue-Mode "host";' > /etc/apt/apt.conf.d/99queue

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
    set -e \
    && apt-get update -yq \
    && apt-get install -yq --no-install-recommends \
    curl \
    ca-certificates \
    gpg-agent \
    software-properties-common \
    && curl -fsSL https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB | gpg --dearmor > /usr/share/keyrings/intel-oneapi-archive-keyring.gpg \
    && echo "deb [signed-by=/usr/share/keyrings/intel-oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main " > /etc/apt/sources.list.d/oneAPI.list \
    && apt-get update -yq

# Install essential build tools:
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
    set -e \
    && apt-get install -yq --no-install-recommends \
    build-essential \
    cmake \
    git \
    less \
    libarchive13 \
    nano \
    net-tools \
    openssh-client \
    pkg-config \
    unzip \
    wget

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
    set -e \
    && apt-get install -yq --no-install-recommends intel-hpckit-2023.2.0


ARG WITH_INTEL_ONEAPI_PYTHON=1
ARG INTEL_ONEAPI_PYTHON_VERSION=2023.2.0-49420
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
    INTEL_ONEAPI_PYTHON_VERSION="${INTEL_ONEAPI_PYTHON_VERSION:-}" \
    [ "${WITH_INTEL_ONEAPI_PYTHON:-}" = 1 ] && { apt-get install -yq --no-install-recommends intel-oneapi-python"${INTEL_ONEAPI_PYTHON_VERSION:+=${INTEL_ONEAPI_PYTHON_VERSION}}" || exit 1; }

# Program to get nproc divided by /x, installed at /usr/local/bin/getnproc :
RUN <<-EOF
    set -eE
    cat <<-'ENDFILE' > /usr/local/bin/getnproc
#!/bin/sh
# shellcheck shell=sh
nproc="$(nproc || grep -c '^processor[[:space:]]*:' /proc/cpuinfo || true)"
nproc="${nproc:-1}"
arg="${1:-/1}"
case "${arg}" in
    /[0-9]*) 
        divisor="${arg#/}"
        [ "${divisor}" -lt 1 ] && divisor=1
        [ "${divisor}" -gt "${nproc}" ] && divisor=1
        echo "$(( nproc / divisor ))"
        ;;
    [0-9]*) [ "${arg}" -lt 1 ] && arg=1
            [ "${arg}" -gt "${nproc}" ] && arg="${nproc}"
            echo "${arg}"
        ;;
    *) echo "${nproc}"
        ;;
esac
ENDFILE
    chmod +x /usr/local/bin/getnproc
EOF

# Set up build target directory and add to cmake prefixes
ARG BUILT_DIR=/opt/built
ENV BUILT_DIR="${BUILT_DIR}"
RUN mkdir -p "${BUILT_DIR}/bin" "${BUILT_DIR}/share" && chmod -R a+rX "${BUILT_DIR}"
# Disable ICC deprecation warning:
ENV __INTEL_PRE_CFLAGS="${__INTEL_PRE_CFLAGS:+${__INTEL_PRE_CFLAGS} }-diag-disable=10441"
FROM builder as build-apt-prerequisites
ARG EIGEN_VERSION=3.4.0
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
    <<-EOF
    source /opt/intel/oneapi/setvars.sh >/dev/null 2>&1
    apt-get install -yq --no-install-recommends \
        libboost-dev \
        libeigen3-dev \
        libfreetype6-dev \
        libftgl-dev \
        libosmesa6-dev \
        libqt5opengl5-dev \
        libqwt-qt5-dev \
        libglib2.0-dev \
        libssl-dev \
        qtbase5-dev \
        zlib1g-dev \
        freeglut3-dev \
        libarpack2-dev \
        libboost-math-dev \
        libboost-random-dev \
        libfftw3-dev \
        libflann-dev \
        libgtest-dev \
        libnifti-dev \
        libpng-dev \
        libsuitesparse-dev \
        uuid-dev \
        libglvnd-dev
EOF

FROM build-apt-prerequisites as build-eigen        
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
WORKDIR /opt/build/eigen
RUN <<-EOF
        curl -fsSL -o src.tar.gz https://gitlab.com/libeigen/eigen/-/archive/${EIGEN_VERSION}/eigen-${EIGEN_VERSION}.tar.gz
        mkdir -p src build
        tar xf src.tar.gz --directory=src --strip-components=1
        rm -rf src.tar.gz
        cd build
        source /opt/intel/oneapi/setvars.sh >/dev/null 2>&1
        cmake \
            -D CMAKE_INSTALL_PREFIX="${BUILT_DIR}" \
            -D CMAKE_PREFIX_PATH="${BUILT_DIR}:${CMAKE_PREFIX_PATH:-}" \
            -D CMAKE_C_COMPILER=icc \
            -D CMAKE_CXX_COMPILER=icpc \
            ../src
        make install
        cd ../
        rm -rf src build
EOF

FROM build-eigen as build-vtk
WORKDIR /opt/build/mirtk/vtk
ARG VTK_VERSION=7.1.1
ARG NCPU="/2"
ARG ADD_INTEL_CFLAGS="-O3 -axCORE-AVX512,CORE-AVX2 -xAVX"
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF
    VTK_RELEASE=`echo ${VTK_VERSION} | sed s/\.[0-9]*$//`
    curl -L -o src.tar.gz http://www.vtk.org/files/release/${VTK_RELEASE}/VTK-${VTK_VERSION}.tar.gz
    mkdir src build
    tar xf src.tar.gz --directory=src --strip-components=1
    rm src.tar.gz

    cd build
    source /opt/intel/oneapi/setvars.sh >/dev/null 2>&1
    if [ -n "${NCPU:-}" ]; then
        NCPU="$(getnproc "${NCPU:-/1}")"
        NCPU="${NCPU:-1}"
        echo "Using NCPU=\"${NCPU}\" cpus" >&2
    fi
    export __INTEL_POST_CFLAGS="${__INTEL_POST_CFLAGS:+${__INTEL_POST_CFLAGS} }${ADD_INTEL_CFLAGS}"

    cmake \
    -D CMAKE_INSTALL_PREFIX="${BUILT_DIR}" \
    -D CMAKE_PREFIX_PATH="${BUILT_DIR}:${CMAKE_PREFIX_PATH:-}" \
    -D CMAKE_C_COMPILER=icc \
    -D CMAKE_CXX_COMPILER=icpc \
    -D VTK_USE_SYSTEM_PNG=ON \
    -D VTK_USE_SYSTEM_ZLIB=ON \
    -D BUILD_SHARED_LIBS=ON \
    -D BUILD_EXAMPLES=OFF \
    -D BUILD_TESTING=OFF \
    -D BUILD_DOCUMENTATION=OFF \
    -D VTK_OPENGL_HAS_OSMESA=ON \
    -S VTK_SMP_ENABLE_TBB=ON \
    ../src
    make -S ${NCPU:+-j "${NCPU}"}
    make install
    cd ../
    rm -rf build src
EOF

FROM build-vtk as build-itk
WORKDIR /opt/build/mirtk/itk
ARG ITK_URL=https://github.com/InsightSoftwareConsortium/ITK/releases/download/v5.4rc01/InsightToolkit-5.4rc01.tar.gz
ARG NCPU="/2"
ARG ADD_INTEL_CFLAGS="-O3 -axCORE-AVX512,CORE-AVX2 -xAVX"
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF
    curl -fL "${ITK_URL}" -o src.tar.gz
    mkdir src build
    tar xf src.tar.gz --directory=src --strip-components=1
    rm src.tar.gz
    cd build

    source /opt/intel/oneapi/setvars.sh >/dev/null 2>&1
    
    if [ -n "${NCPU:-}" ]; then
        NCPU="$(getnproc "${NCPU:-/1}")"
        NCPU="${NCPU:-1}"
        echo "Using NCPU=\"${NCPU}\" cpus" >&2
    fi
    export __INTEL_POST_CFLAGS="${__INTEL_POST_CFLAGS:+${__INTEL_POST_CFLAGS} }${ADD_INTEL_CFLAGS}"
    
    cmake \
        -D CMAKE_INSTALL_PREFIX="${BUILT_DIR}" \
        -D CMAKE_PREFIX_PATH="${BUILT_DIR}:${CMAKE_PREFIX_PATH:-}" \
        -D CMAKE_C_COMPILER=icc \
        -D CMAKE_CXX_COMPILER=icpc \
        -D BUILD_EXAMPLES=OFF \
        -D BUILD_SHARED_LIBS=ON \
        -D BUILD_TESTING=OFF \
        -D BUILD_DOCUMENTATION=OFF \
        -D ITK_USE_MKL=ON \
        -D ITK_USE_SYSTEM_PNG=ON \
        -D ITK_USE_SYSTEM_ZLIB=ON \
        ../src
    make -S ${NCPU:+-j "${NCPU}"}
    make install
    cd ../
    rm -rf build src
EOF

FROM build-itk as build-mirtk
WORKDIR /opt/build/mirtk
ARG NCPU="/2"
ARG ADD_INTEL_CFLAGS="-O3 -axCORE-AVX512,CORE-AVX2 -xAVX"
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF
    source /opt/intel/oneapi/setvars.sh >/dev/null 2>&1
    ldconfig

    git clone --recursive -b dhcp-v1  https://github.com/BioMedIA/MIRTK.git src
    cd src
    git reset --hard 078553da78ab449e12b877b2852ebcf5d10de7ba
    git submodule update
    (cd Packages/DrawEM && git checkout v1.2.1)

    git checkout be86b02 -- CMake/Modules/FindTBB.cmake Modules/Common/src/Parallel.cc Modules/Common/include/mirtk/Parallel.h
    sed -Ei 's/(^.*\bMIRTK_Common_EXPORT\b.*\btbb_scheduler.*$)/\/\/ \1/g' Modules/Common/include/mirtk/Parallel.h
    sed -Ei 's/(^.*tbb::task_scheduler_init.*$)/\/\/ \1/g' Modules/Common/include/mirtk/Parallel.h
    sed -Ei 's/(^.*tbb[/]task_scheduler_init.h.*$)/\/\/ \1/g' Modules/Common/include/mirtk/Parallel.h
    
    cd /opt/build/mirtk/src/Packages/DrawEM
    curl -fL -o atlases-dhcp-structural-pipeline-v1.zip 'https://biomedic.doc.ic.ac.uk/brain-development/downloads/dHCP/atlases-dhcp-structural-pipeline-v1.zip'
    unzip atlases-dhcp-structural-pipeline-v1.zip -d .
    rm atlases-dhcp-structural-pipeline-v1.zip
    cd /opt/build/mirtk
    mkdir build && cd build
    
    if [ -n "${NCPU:-}" ]; then
        NCPU="$(getnproc "${NCPU:-/1}")"
        NCPU="${NCPU:-1}"
        echo "Using NCPU=\"${NCPU}\" cpus" >&2
    fi
    export __INTEL_POST_CFLAGS="${__INTEL_POST_CFLAGS:+${__INTEL_POST_CFLAGS} }${ADD_INTEL_CFLAGS}"

    cmake \
    -D CMAKE_INSTALL_PREFIX="${BUILT_DIR}" \
    -D CMAKE_PREFIX_PATH="${BUILT_DIR}:${CMAKE_PREFIX_PATH:-}" \
    -D CMAKE_C_COMPILER=icc \
    -D CMAKE_CXX_COMPILER=icpc \
    -D CMAKE_BUILD_TYPE=Release \
    -D MODULE_Deformable=ON \
    -D MODULE_DrawEM=ON \
    -D WITH_VTK=ON \
    -D WITH_TBB=ON \
    -D WITH_ITK=ON \
    -D VTK_DIR="${BUILT_DIR}" \
    -D ITK_DIR="${BUILT_DIR}" \
    ../src
    make -S ${NCPU:+-j "${NCPU}"}
    make install
    cd ../
    rm -rf src build
EOF

FROM build-mirtk as build-workbench
WORKDIR /opt/build/workbench
ARG WORKBENCH_GIT_TAG=
ARG NCPU="/2"
ARG ADD_INTEL_CFLAGS="-O3 -axCORE-AVX512,CORE-AVX2 -xAVX"
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF
    mkdir src build 
    WORKBENCH_URL_BASE='https://github.com/Washington-University/workbench/archive/refs'
    WORKBENCH_GIT_TAG="${WORKBENCH_GIT_TAG:-}"
    WORKBENCH_URL="${WORKBENCH_URL_BASE}/${WORKBENCH_GIT_TAG:+tags/${WORKBENCH_GIT_TAG}}${WORKBENCH_GIT_TAG:-heads/master}.tar.gz"
    curl -L "${WORKBENCH_URL}" -o src.tar.gz
    tar xf src.tar.gz --directory=src --strip-components=1
    rm src.tar.gz

    # Modify Intel compiler name match to include icpx, the new Intel CPP compiler:
    sed --in-place -E '/^IF.*icpc/,/^ENDIF.*MATCHES.*icpc.*/ s/^.*ADD_DEF.*Wall.*/#/; s/\*icpc\$/*icp[cx]\$/g; s/-Wall/-Wno-inconsistent-missing-override -Wno-unused-command-line-argument/g' src/src/CMakeLists.txt

    # Fix icpc: command line error: option '-openmp-link=static' is not supported. Please use the replacement option '-qopenmp-link=static'
    sed --in-place -E 's/-openmp-link=static/-qopenmp-link=static/g' src/src/CMakeLists.txt
    
    cd build
    
    source /opt/intel/oneapi/setvars.sh >/dev/null 2>&1
    if [ -n "${NCPU:-}" ]; then
        NCPU="$(getnproc "${NCPU:-/1}")"
        NCPU="${NCPU:-1}"
        echo "Using NCPU=\"${NCPU}\" cpus" >&2
    fi
    export __INTEL_POST_CFLAGS="${__INTEL_POST_CFLAGS:+${__INTEL_POST_CFLAGS} }-std=c++14 ${ADD_INTEL_CFLAGS}"        
    cmake \
        -D CMAKE_INSTALL_PREFIX="${BUILT_DIR}" \
        -D CMAKE_PREFIX_PATH="${BUILT_DIR}:${CMAKE_PREFIX_PATH:-}" \
        -D CMAKE_C_COMPILER=icc \
        -D CMAKE_CXX_COMPILER=icpc \
        -D CMAKE_BUILD_TYPE=Release \
        -D WORKBENCH_MESA_DIR=/usr \
        -D WORKBENCH_USE_QT5=TRUE \
        -D WORKBENCH_USE_SIMD=TRUE \
        -D CMAKE_CXX_STANDARD=14 \
        -D CMAKE_CXX_STANDARD_REQUIRED=ON \
        ../src/src
    make -S ${NCPU:+-j "${NCPU}"}
    make test
    make install
    cd /opt/build/workbench
    rm -rf build src
EOF

FROM build-workbench as build-pipeline
WORKDIR /opt/build/pipeline/src
COPY --chmod=a+rX dhcp-pipeline.sh version CMakeLists.txt CHANGES.txt ./
COPY --chmod=a+rX applications ./applications
COPY --chmod=a+rX parameters ./parameters
COPY --chmod=a+rX scripts ./scripts
COPY --chmod=a+rX ThirdParty ./ThirdParty
WORKDIR /opt/build/pipeline
ARG NCPU="/2"
ARG ADD_INTEL_CFLAGS="-O3 -axCORE-AVX512,CORE-AVX2 -xAVX"
SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
RUN <<-EOF
    source /opt/intel/oneapi/setvars.sh >/dev/null 2>&1    
    if [ -n "${NCPU:-}" ]; then
        NCPU="$(getnproc "${NCPU:-/1}")"
        NCPU="${NCPU:-1}"
        echo "Using NCPU=\"${NCPU}\" cpus" >&2
    fi
    export __INTEL_POST_CFLAGS="${__INTEL_POST_CFLAGS:+${__INTEL_POST_CFLAGS} }${ADD_INTEL_CFLAGS}"
    mkdir build && cd build
    cmake \
        -D CMAKE_INSTALL_PREFIX="${BUILT_DIR}" \
        -D CMAKE_PREFIX_PATH="${BUILT_DIR}:${CMAKE_PREFIX_PATH:-}" \
        -D CMAKE_C_COMPILER=icc \
        -D CMAKE_CXX_COMPILER=icpc \
        -D CMAKE_BUILD_TYPE=Release \
        -D MODULE_Deformable=ON \
        -D MODULE_DrawEM=ON \
        -D WITH_VTK=ON \
        -D WITH_TBB=ON \
        -D WITH_ITK=ON \
        -D VTK_DIR="${BUILT_DIR}" \
        -D ITK_DIR="${BUILT_DIR}" \
        -D MIRTK_DIR="${BUILT_DIR}" \
        ../src
    make -S ${NCPU:+-j "${NCPU}"}
    cd /opt/build/pipeline
EOF

# FROM workbench-source as workbench-builder-gcc
# WORKDIR /opt/build/workbench
# ARG NCPU="/2"
# ARG ADD_GCC_CFLAGS="-O3 -march=skylake-avx512"
# SHELL ["/bin/bash", "-eEx", "-o", "pipefail", "-c"]
# RUN <<-EOF    
#     mkdir -p build && cd build
    
#     source /opt/intel/oneapi/setvars.sh >/dev/null 2>&1
#     export CMAKE_PREFIX_PATH="${CMAKE_PREFIX_PATH}:/usr:/usr/local"
#     if [ -n "${NCPU:-}" ]; then
#         NCPU="$(getnproc "${NCPU:-/1}")"
#         NCPU="${NCPU:-1}"
#         echo "Using NCPU=\"${NCPU}\" cpus" >&2
#     fi
    
#     cmake \
#         -D CMAKE_INSTALL_PREFIX="${BUILT_DIR}" \
#         -D CMAKE_C_COMPILER=gcc-9 \
#         -D CMAKE_CXX_COMPILER=g++-9 \
#         -D CMAKE_BUILD_TYPE=Release \
#         -D WORKBENCH_MESA_DIR=/usr \
#         -D WORKBENCH_USE_QT5=TRUE \
#         -D WORKBENCH_USE_SIMD=TRUE  \
#         -D CMAKE_CFLAGS="${ADD_GCC_CFLAGS}" \
#         -D CMAKE_CXX_FLAGS="${ADD_GCC_CFLAGS}" \
#         ../workbench/src
#     make -S ${NCPU:+-j "${NCPU}"}
#     make test || echo "Could not run test!"
#     cd /opt/build/workbench
# EOF


# ARG INTEL_CFLAGS="-O3 -axCORE-AVX512,CORE-AVX2 -xAVX"
# export __INTEL_POST_CFLAGS="${__INTEL_POST_CFLAGS:+${__INTEL_POST_CFLAGS} }${INTEL_CFLAGS:-}"
# cmake \
#     -D CMAKE_INSTALL_PREFIX="${BUILT_DIR}" \
#     -D CMAKE_C_COMPILER=icc \
#     -D CMAKE_CXX_COMPILER=icpc \
#     -D CMAKE_BUILD_TYPE=Release \
#     -D WORKBENCH_MESA_DIR=/usr \
#     -D WORKBENCH_USE_QT5=TRUE \
#     -D WORKBENCH_USE_SIMD=TRUE \
#     -D CMAKE_CXX_STANDARD=11 \
#     -D CMAKE_CXX_STANDARD_REQUIRED=ON \
#     -D CMAKE_CXX_EXTENSIONS=OFF \
#     -D CMAKE_CXX_FLAGS='-std=c++11' \
#     ../workbench/src    
# make -S ${NCPU:-}


