# syntax=docker/dockerfile:1
## Build Docker image for execution of dhcp pipelines within a Docker
## container with all modules and applications available in the image

#FROM intel/oneapi-basekit:2023.2.1-devel-ubuntu20.04 as builder
FROM ubuntu:20.04 as builder

# Global system-level config
ENV TZ=UTC \
    LANGUAGE=en_US:en \
    LC_ALL=C.UTF-8 \
    LANG=C.UTF-8 \
    DEBIAN_FRONTEND=noninteractive \
    APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1

# Force apt to leave downloaded binaries in /var/cache/apt (massively speeds up Docker builds)
RUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache

# Acquire::Queue-Mode: Queuing mode; Queue-Mode can be one of host or access which determines how APT parallelizes outgoing connections. host means that one connection per target host will be opened, access means that one connection per URI type will be opened.
RUN echo 'Acquire::Queue-Mode "host";' > /etc/apt/apt.conf.d/99queue

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
    set -e \
    && apt-get update -yq \
    && apt-get install -yq --no-install-recommends \
    curl \
    ca-certificates \
    gpg-agent \
    software-properties-common \
    && curl -fsSL https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB | gpg --dearmor > /usr/share/keyrings/intel-oneapi-archive-keyring.gpg \
    && echo "deb [signed-by=/usr/share/keyrings/intel-oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main " > /etc/apt/sources.list.d/oneAPI.list \
    && apt-get update -yq

# Install essential build tools:
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
    set -e \
    && apt-get install -yq --no-install-recommends \
    build-essential \
    cmake \
    git \
    less \
    libarchive13 \
    nano \
    net-tools \
    openssh-client \
    pkg-config \
    unzip \
    wget

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
    set -e \
    && apt-get install -yq --no-install-recommends intel-hpckit-2023.2.0

ARG WITH_INTEL_ONEAPI_PYTHON=1
ARG INTEL_ONEAPI_PYTHON_VERSION=2023.2.0-49420
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
    if [ "${WITH_INTEL_ONEAPI_PYTHON:-0}" = 1]; then apt-get install -yq --no-install-recommends "intel-oneapi-python${INTEL_ONEAPI_PYTHON_VERSION:+=${INTEL_ONEAPI_PYTHON_VERSION}}" || exit 1; fi


FROM builder as workbench-prerequisites
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
    <<-EOF
    apt-get install -yq --no-install-recommends \
        libboost-dev \
        libeigen3-dev \
        libfreetype6-dev \
        libftgl-dev \
        libglib2.0-dev \
        libosmesa6-dev \
        libqt5opengl5-dev \
        libqwt-qt5-dev \
        libssl-dev \
        qtbase5-dev \
        zlib1g-dev
EOF

FROM workbench-prerequisites as workbench-builder
WORKDIR /opt/build/workbench
SHELL ["/bin/bash", "-eE", "-c"]
ARG NCPU=
RUN <<EOF
    git clone --depth=1 --shallow-submodules https://github.com/Washington-University/workbench.git workbench
    
    # Modify Intel compiler name match to include icpx, the new Intel CPP compiler:
    sed --in-place -E '/^IF.*icpc/,/^ENDIF.*MATCHES.*icpc.*/ s/^.*ADD_DEF.*Wall.*/#/; s/\*icpc\$/*icp[cx]\$/g; s/-Wall/-Wno-inconsistent-missing-override -Wno-unused-command-line-argument/g' workbench/src/CMakeLists.txt
    mkdir -p build && cd build
    if [[ -z "${NCPU:-}" ]]; then
        total_cpus="$(nproc)"
        try_cpus=$((total_cpus/2))
        (( 1 > try_cpus)) && try_cpus=1
        NCPU="${try_cpus}"
    fi
    cmake \
        -D CMAKE_C_COMPILER=icx \
        -D CMAKE_CXX_COMPILER=icpx \
        -D CLANG_FLAG=TRUE \
        -D CMAKE_BUILD_TYPE=Release \
        -D WORKBENCH_MESA_DIR=/usr \
        -D WORKBENCH_USE_QT5=TRUE \
        -D WORKBENCH_USE_SIMD=TRUE  \
        -D CMAKE_CXX_STANDARD=11 \
        -D CMAKE_CXX_STANDARD_REQUIRED=ON \
        -D CMAKE_CXX_EXTENSIONS=OFF \
        -D CMAKE_CXX_FLAGS="-std=c++11 -Wno-c++11-narrowing -Wno-unused-command-line-argument" \
        ../workbench/src    
    make "-j${NCPU:-}"
    cd /opt/build/workbench
    rm -rf workbench
EOF

# SHELL ["/bin/bash", "-eEux", "-o", "pipefail", "-c"]
# RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
#     --mount=type=cache,target=/var/lib/apt,sharing=locked \
#     --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
#     <<-EOF
# export DEBIAN_FRONTEND=noninteractive
# apt-get update -yq
# apt-get install -yq --no-install-recommends \
#         python3-dev \
#         python3-pip
# EOF

# FROM workbench-builder as itk-builder
# SHELL ["/bin/bash", "-eEux", "-o", "pipefail", "-c"]
# RUN <<-EOF
# pip install --no-cache-dir itk==5.3.0
# EOF

FROM builder as mirtk-builder-prerequisites
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    --mount=type=cache,sharing=locked,target=/var/lib/apt/lists \
    <<-EOF
export DEBIAN_FRONTEND=noninteractive
apt-get update -yq

apt-get install -yq --no-install-recommends \
                freeglut3-dev \
                libarpack2-dev \
                libboost-math-dev \
                libboost-random-dev \
                libfftw3-dev \
                libflann-dev \
                libgtest-dev \
                libnifti-dev \
                libpng-dev \
                libsuitesparse-dev \
                python3 \
                python3-pip \
                uuid-dev \
                libglvnd-dev
EOF

# FROM mirtk-builder-prerequisites as mirtk-builder-eigen
# WORKDIR /opt/build/mirtk
# ARG EIGEN_VERSION=3.4.0
# RUN EIGEN_SOURCE_DIR=/usr/src/eigen-${EIGEN_VERSION} \
#     && mkdir ${EIGEN_SOURCE_DIR} /usr/include/eigen3 \
#     && cd ${EIGEN_SOURCE_DIR} \
#     && wget -O archive.tar.bz2 https://gitlab.com/libeigen/eigen/-/archive/${EIGEN_VERSION}/eigen-${EIGEN_VERSION}.tar.bz2 \
#     && tar vxjf archive.tar.bz2 --strip 1 \
#     && mv signature_of_eigen3_matrix_library Eigen /usr/include/eigen3/ \
#     && mv cmake/FindEigen3.cmake /usr/share/cmak/Modules/ \
#     && cd /usr/src \
#     && rm -rf ${EIGEN_SOURCE_DIR}
FROM mirtk-builder-prerequisites as mirtk-builder-vtk
WORKDIR /opt/build/vtk
ARG VTK_VERSION=9.3.0
ARG NCPU=
SHELL ["/bin/bash", "-eE", "-c"]
RUN <<-EOF
    if [[ -z "${NCPU:-}" ]]; then
        total_cpus="$(nproc)"
        try_cpus=$((total_cpus/2))
        (( 1 > try_cpus)) && try_cpus=1
        NCPU="${try_cpus:-1}"
    fi

    VTK_RELEASE=`echo ${VTK_VERSION} | sed s/\.[0-9]*$//`
    wget http://www.vtk.org/files/release/${VTK_RELEASE}/VTK-${VTK_VERSION}.tar.gz
    tar -xzf VTK-${VTK_VERSION}.tar.gz
    rm -f VTK-${VTK_VERSION}.tar.gz
    mkdir build && cd build
    cmake \
    -D CMAKE_C_COMPILER=icx \
    -D CMAKE_CXX_COMPILER=icpx \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D CMAKE_BUILD_TYPE=Release \
    -D CMAKE_CXX_STANDARD=${CXX_STANDARD} \
    -D VTK_USE_SYSTEM_PNG=ON \
    -D VTK_USE_SYSTEM_ZLIB=ON \
    -D BUILD_SHARED_LIBS=ON \
    -D BUILD_EXAMPLES=OFF \
    -D BUILD_TESTING=OFF \
    -D BUILD_DOCUMENTATION=OFF \
    -D CMAKE_CXX_FLAGS="-static-intel" \
    ../VTK-${VTK_VERSION}
    make -j${NCPU} -S
EOF

FROM mirtk-builder-vtk as mirtk-builder-vtk-install
WORKDIR /opt/build/mirtk
SHELL ["/bin/bash", "-eE", "-c"]
ARG NCPU=
RUN <<-EOF
    export PS4='+${LINENO}: '
    mkdir -p /opt/build/mirtk/build
    cd /opt/build/vtk/build && make install
    ldconfig
EOF

FROM mirtk-builder-vtk-install as mirtk-builder-mirtk
WORKDIR /opt/build/mirtk
SHELL ["/bin/bash", "-eE", "-c"]
ARG NCPU=
RUN <<-EOF
    export PS4='+${LINENO}: '
    mkdir -p /opt/build/mirtk/build
    git clone --recursive -b dhcp-v1  https://github.com/BioMedIA/MIRTK.git MIRTK
    cd MIRTK
    git reset --hard 078553da78ab449e12b877b2852ebcf5d10de7ba
    git submodule update
	(cd Packages/DrawEM && git checkout v1.2.1)
    cd /opt/build/mirtk/build
    if [[ -z "${NCPU:-}" ]]; then
        total_cpus="$(nproc)"
        try_cpus=$((total_cpus/2))
        (( 1 > try_cpus)) && try_cpus=1
        NCPU="${try_cpus:-1}"
    fi
    cmake \
        -D CMAKE_C_COMPILER=icx \
        -D CMAKE_CXX_COMPILER=icpx \
        -D CMAKE_INSTALL_PREFIX=/usr/local \
        -D CLANG_FLAG=TRUE \
        -D CMAKE_BUILD_TYPE=Release \
        -D MODULE_Deformable=ON \
        -D MODULE_DrawEM=ON \
        -D DEPENDS_TBB_DIR=/opt/intel/oneapi/tbb/latest \
        -D WITH_VTK=ON \
        -D WITH_TBB=ON \
        -D WITH_ITK=ON \
        -D PYTHON_EXECUTABLE=/usr/bin/python3 \
        ../MIRTK
    make "-j${NCPU:-}"
EOF
